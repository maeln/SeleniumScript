/*
 * generated by Xtext 2.10.0
 */
grammar InternalSeleniumScript;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package emn.fil.a3.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package emn.fil.a3.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import emn.fil.a3.services.SeleniumScriptGrammarAccess;

}
@parser::members {
	private SeleniumScriptGrammarAccess grammarAccess;

	public void setGrammarAccess(SeleniumScriptGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleScript
entryRuleScript
:
{ before(grammarAccess.getScriptRule()); }
	 ruleScript
{ after(grammarAccess.getScriptRule()); } 
	 EOF 
;

// Rule Script
ruleScript 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getScriptAccess().getGroup()); }
		(rule__Script__Group__0)
		{ after(grammarAccess.getScriptAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunction
entryRuleFunction
:
{ before(grammarAccess.getFunctionRule()); }
	 ruleFunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule Function
ruleFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionAccess().getGroup()); }
		(rule__Function__Group__0)
		{ after(grammarAccess.getFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFun
entryRuleFun
:
{ before(grammarAccess.getFunRule()); }
	 ruleFun
{ after(grammarAccess.getFunRule()); } 
	 EOF 
;

// Rule Fun
ruleFun 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunAccess().getAlternatives()); }
		(rule__Fun__Alternatives)
		{ after(grammarAccess.getFunAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
		(rule__Expression__Alternatives)
		{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSelectors
entryRuleSelectors
:
{ before(grammarAccess.getSelectorsRule()); }
	 ruleSelectors
{ after(grammarAccess.getSelectorsRule()); } 
	 EOF 
;

// Rule Selectors
ruleSelectors 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelectorsAccess().getGroup()); }
		(rule__Selectors__Group__0)
		{ after(grammarAccess.getSelectorsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSelector
entryRuleSelector
:
{ before(grammarAccess.getSelectorRule()); }
	 ruleSelector
{ after(grammarAccess.getSelectorRule()); } 
	 EOF 
;

// Rule Selector
ruleSelector 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelectorAccess().getGroup()); }
		(rule__Selector__Group__0)
		{ after(grammarAccess.getSelectorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleElem
entryRuleElem
:
{ before(grammarAccess.getElemRule()); }
	 ruleElem
{ after(grammarAccess.getElemRule()); } 
	 EOF 
;

// Rule Elem
ruleElem 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getElemAccess().getAlternatives()); }
		(rule__Elem__Alternatives)
		{ after(grammarAccess.getElemAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePropSelector
entryRulePropSelector
:
{ before(grammarAccess.getPropSelectorRule()); }
	 rulePropSelector
{ after(grammarAccess.getPropSelectorRule()); } 
	 EOF 
;

// Rule PropSelector
rulePropSelector 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPropSelectorAccess().getGroup()); }
		(rule__PropSelector__Group__0)
		{ after(grammarAccess.getPropSelectorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProp
entryRuleProp
:
{ before(grammarAccess.getPropRule()); }
	 ruleProp
{ after(grammarAccess.getPropRule()); } 
	 EOF 
;

// Rule Prop
ruleProp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPropAccess().getAlternatives()); }
		(rule__Prop__Alternatives)
		{ after(grammarAccess.getPropAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePRIMARY
entryRulePRIMARY
:
{ before(grammarAccess.getPRIMARYRule()); }
	 rulePRIMARY
{ after(grammarAccess.getPRIMARYRule()); } 
	 EOF 
;

// Rule PRIMARY
rulePRIMARY 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPRIMARYAccess().getAlternatives()); }
		(rule__PRIMARY__Alternatives)
		{ after(grammarAccess.getPRIMARYAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSEPARATOR
entryRuleSEPARATOR
:
{ before(grammarAccess.getSEPARATORRule()); }
	 ruleSEPARATOR
{ after(grammarAccess.getSEPARATORRule()); } 
	 EOF 
;

// Rule SEPARATOR
ruleSEPARATOR 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSEPARATORAccess().getWHITE_SPACETerminalRuleCall()); }
		RULE_WHITE_SPACE
		{ after(grammarAccess.getSEPARATORAccess().getWHITE_SPACETerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSELECTOR_COMBINATOR
entryRuleSELECTOR_COMBINATOR
:
{ before(grammarAccess.getSELECTOR_COMBINATORRule()); }
	 ruleSELECTOR_COMBINATOR
{ after(grammarAccess.getSELECTOR_COMBINATORRule()); } 
	 EOF 
;

// Rule SELECTOR_COMBINATOR
ruleSELECTOR_COMBINATOR 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSELECTOR_COMBINATORAccess().getFullStopKeyword()); }
		'.'
		{ after(grammarAccess.getSELECTOR_COMBINATORAccess().getFullStopKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePROP_SELECTOR_COMBINATOR
entryRulePROP_SELECTOR_COMBINATOR
:
{ before(grammarAccess.getPROP_SELECTOR_COMBINATORRule()); }
	 rulePROP_SELECTOR_COMBINATOR
{ after(grammarAccess.getPROP_SELECTOR_COMBINATORRule()); } 
	 EOF 
;

// Rule PROP_SELECTOR_COMBINATOR
rulePROP_SELECTOR_COMBINATOR 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPROP_SELECTOR_COMBINATORAccess().getWHITE_SPACETerminalRuleCall()); }
		RULE_WHITE_SPACE
		{ after(grammarAccess.getPROP_SELECTOR_COMBINATORAccess().getWHITE_SPACETerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunAccess().getOpenKeyword_0()); }
		'open'
		{ after(grammarAccess.getFunAccess().getOpenKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getFunAccess().getGoKeyword_1()); }
		'go'
		{ after(grammarAccess.getFunAccess().getGoKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getFunAccess().getClickKeyword_2()); }
		'click'
		{ after(grammarAccess.getFunAccess().getClickKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getFunAccess().getFillKeyword_3()); }
		'fill'
		{ after(grammarAccess.getFunAccess().getFillKeyword_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getSelectorsParserRuleCall_0()); }
		ruleSelectors
		{ after(grammarAccess.getExpressionAccess().getSelectorsParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getPRIMARYParserRuleCall_1()); }
		rulePRIMARY
		{ after(grammarAccess.getExpressionAccess().getPRIMARYParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selectors__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectorsAccess().getGroup_1_0()); }
		(rule__Selectors__Group_1_0__0)
		{ after(grammarAccess.getSelectorsAccess().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getSelectorsAccess().getSelectorsAssignment_1_1()); }
		(rule__Selectors__SelectorsAssignment_1_1)
		{ after(grammarAccess.getSelectorsAccess().getSelectorsAssignment_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Elem__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElemAccess().getFieldKeyword_0()); }
		'field'
		{ after(grammarAccess.getElemAccess().getFieldKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getElemAccess().getButtonKeyword_1()); }
		'button'
		{ after(grammarAccess.getElemAccess().getButtonKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getElemAccess().getCheckboxKeyword_2()); }
		'checkbox'
		{ after(grammarAccess.getElemAccess().getCheckboxKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getElemAccess().getLinkKeyword_3()); }
		'link'
		{ after(grammarAccess.getElemAccess().getLinkKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getElemAccess().getSelectKeyword_4()); }
		'select'
		{ after(grammarAccess.getElemAccess().getSelectKeyword_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prop__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropAccess().getIdKeyword_0()); }
		'id'
		{ after(grammarAccess.getPropAccess().getIdKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getPropAccess().getClassKeyword_1()); }
		'class'
		{ after(grammarAccess.getPropAccess().getClassKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getPropAccess().getNameKeyword_2()); }
		'name'
		{ after(grammarAccess.getPropAccess().getNameKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getPropAccess().getValueKeyword_3()); }
		'value'
		{ after(grammarAccess.getPropAccess().getValueKeyword_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PRIMARY__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPRIMARYAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getPRIMARYAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPRIMARYAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getPRIMARYAccess().getIDTerminalRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPRIMARYAccess().getINTTerminalRuleCall_2()); }
		RULE_INT
		{ after(grammarAccess.getPRIMARYAccess().getINTTerminalRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Script__Group__0__Impl
	rule__Script__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScriptAccess().getFunctionsAssignment_0()); }
	(rule__Script__FunctionsAssignment_0)
	{ after(grammarAccess.getScriptAccess().getFunctionsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Script__Group__1__Impl
	rule__Script__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScriptAccess().getGroup_1()); }
	(rule__Script__Group_1__0)*
	{ after(grammarAccess.getScriptAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Script__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScriptAccess().getWSTerminalRuleCall_2()); }
	(RULE_WS)*
	{ after(grammarAccess.getScriptAccess().getWSTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Script__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Script__Group_1__0__Impl
	rule__Script__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScriptAccess().getEND_OF_LINETerminalRuleCall_1_0()); }
	RULE_END_OF_LINE
	{ after(grammarAccess.getScriptAccess().getEND_OF_LINETerminalRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Script__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScriptAccess().getFunctionsAssignment_1_1()); }
	(rule__Script__FunctionsAssignment_1_1)
	{ after(grammarAccess.getScriptAccess().getFunctionsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__0__Impl
	rule__Function__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getNameAssignment_0()); }
	(rule__Function__NameAssignment_0)
	{ after(grammarAccess.getFunctionAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getGroup_1()); }
	(rule__Function__Group_1__0)
	{ after(grammarAccess.getFunctionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_1__0__Impl
	rule__Function__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getSEPARATORParserRuleCall_1_0()); }
	ruleSEPARATOR
	{ after(grammarAccess.getFunctionAccess().getSEPARATORParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getParamsAssignment_1_1()); }
	(rule__Function__ParamsAssignment_1_1)
	{ after(grammarAccess.getFunctionAccess().getParamsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Selectors__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selectors__Group__0__Impl
	rule__Selectors__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Selectors__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorsAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getSelectorsAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selectors__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selectors__Group__1__Impl
	rule__Selectors__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Selectors__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorsAccess().getAlternatives_1()); }
	(rule__Selectors__Alternatives_1)
	{ after(grammarAccess.getSelectorsAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selectors__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selectors__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Selectors__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorsAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getSelectorsAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Selectors__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selectors__Group_1_0__0__Impl
	rule__Selectors__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Selectors__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorsAccess().getLeftParenthesisKeyword_1_0_0()); }
	'('
	{ after(grammarAccess.getSelectorsAccess().getLeftParenthesisKeyword_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selectors__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selectors__Group_1_0__1__Impl
	rule__Selectors__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Selectors__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorsAccess().getSelectorsAssignment_1_0_1()); }
	(rule__Selectors__SelectorsAssignment_1_0_1)
	{ after(grammarAccess.getSelectorsAccess().getSelectorsAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selectors__Group_1_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selectors__Group_1_0__2__Impl
	rule__Selectors__Group_1_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Selectors__Group_1_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorsAccess().getRightParenthesisKeyword_1_0_2()); }
	')'
	{ after(grammarAccess.getSelectorsAccess().getRightParenthesisKeyword_1_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selectors__Group_1_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selectors__Group_1_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Selectors__Group_1_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorsAccess().getGroup_1_0_3()); }
	(rule__Selectors__Group_1_0_3__0)*
	{ after(grammarAccess.getSelectorsAccess().getGroup_1_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Selectors__Group_1_0_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selectors__Group_1_0_3__0__Impl
	rule__Selectors__Group_1_0_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Selectors__Group_1_0_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorsAccess().getSELECTOR_COMBINATORParserRuleCall_1_0_3_0()); }
	ruleSELECTOR_COMBINATOR
	{ after(grammarAccess.getSelectorsAccess().getSELECTOR_COMBINATORParserRuleCall_1_0_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selectors__Group_1_0_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selectors__Group_1_0_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Selectors__Group_1_0_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorsAccess().getSelectorsAssignment_1_0_3_1()); }
	(rule__Selectors__SelectorsAssignment_1_0_3_1)
	{ after(grammarAccess.getSelectorsAccess().getSelectorsAssignment_1_0_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Selector__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selector__Group__0__Impl
	rule__Selector__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorAccess().getNameAssignment_0()); }
	(rule__Selector__NameAssignment_0)
	{ after(grammarAccess.getSelectorAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selector__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorAccess().getGroup_1()); }
	(rule__Selector__Group_1__0)?
	{ after(grammarAccess.getSelectorAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Selector__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selector__Group_1__0__Impl
	rule__Selector__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorAccess().getWHITE_SPACETerminalRuleCall_1_0()); }
	RULE_WHITE_SPACE
	{ after(grammarAccess.getSelectorAccess().getWHITE_SPACETerminalRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selector__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorAccess().getGroup_1_1()); }
	(rule__Selector__Group_1_1__0)
	{ after(grammarAccess.getSelectorAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Selector__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selector__Group_1_1__0__Impl
	rule__Selector__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorAccess().getSelectorsAssignment_1_1_0()); }
	(rule__Selector__SelectorsAssignment_1_1_0)
	{ after(grammarAccess.getSelectorAccess().getSelectorsAssignment_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selector__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorAccess().getGroup_1_1_1()); }
	(rule__Selector__Group_1_1_1__0)*
	{ after(grammarAccess.getSelectorAccess().getGroup_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Selector__Group_1_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selector__Group_1_1_1__0__Impl
	rule__Selector__Group_1_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group_1_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorAccess().getPROP_SELECTOR_COMBINATORParserRuleCall_1_1_1_0()); }
	rulePROP_SELECTOR_COMBINATOR
	{ after(grammarAccess.getSelectorAccess().getPROP_SELECTOR_COMBINATORParserRuleCall_1_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group_1_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selector__Group_1_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group_1_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorAccess().getPropSelectorsAssignment_1_1_1_1()); }
	(rule__Selector__PropSelectorsAssignment_1_1_1_1)
	{ after(grammarAccess.getSelectorAccess().getPropSelectorsAssignment_1_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PropSelector__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropSelector__Group__0__Impl
	rule__PropSelector__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropSelector__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropSelectorAccess().getNameAssignment_0()); }
	(rule__PropSelector__NameAssignment_0)
	{ after(grammarAccess.getPropSelectorAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropSelector__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropSelector__Group__1__Impl
	rule__PropSelector__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PropSelector__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropSelectorAccess().getWHITE_SPACETerminalRuleCall_1()); }
	RULE_WHITE_SPACE
	{ after(grammarAccess.getPropSelectorAccess().getWHITE_SPACETerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropSelector__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropSelector__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropSelector__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropSelectorAccess().getParamAssignment_2()); }
	(rule__PropSelector__ParamAssignment_2)
	{ after(grammarAccess.getPropSelectorAccess().getParamAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Script__FunctionsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getScriptAccess().getFunctionsFunctionParserRuleCall_0_0()); }
		ruleFunction
		{ after(grammarAccess.getScriptAccess().getFunctionsFunctionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__FunctionsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getScriptAccess().getFunctionsFunctionParserRuleCall_1_1_0()); }
		ruleFunction
		{ after(grammarAccess.getScriptAccess().getFunctionsFunctionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getNameFunParserRuleCall_0_0()); }
		ruleFun
		{ after(grammarAccess.getFunctionAccess().getNameFunParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__ParamsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getParamsExpressionParserRuleCall_1_1_0()); }
		ruleExpression
		{ after(grammarAccess.getFunctionAccess().getParamsExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selectors__SelectorsAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectorsAccess().getSelectorsSelectorParserRuleCall_1_0_1_0()); }
		ruleSelector
		{ after(grammarAccess.getSelectorsAccess().getSelectorsSelectorParserRuleCall_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selectors__SelectorsAssignment_1_0_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectorsAccess().getSelectorsSelectorParserRuleCall_1_0_3_1_0()); }
		ruleSelector
		{ after(grammarAccess.getSelectorsAccess().getSelectorsSelectorParserRuleCall_1_0_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selectors__SelectorsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectorsAccess().getSelectorsSelectorParserRuleCall_1_1_0()); }
		ruleSelector
		{ after(grammarAccess.getSelectorsAccess().getSelectorsSelectorParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectorAccess().getNameElemParserRuleCall_0_0()); }
		ruleElem
		{ after(grammarAccess.getSelectorAccess().getNameElemParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__SelectorsAssignment_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectorAccess().getSelectorsPropSelectorParserRuleCall_1_1_0_0()); }
		rulePropSelector
		{ after(grammarAccess.getSelectorAccess().getSelectorsPropSelectorParserRuleCall_1_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__PropSelectorsAssignment_1_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectorAccess().getPropSelectorsPropSelectorParserRuleCall_1_1_1_1_0()); }
		rulePropSelector
		{ after(grammarAccess.getSelectorAccess().getPropSelectorsPropSelectorParserRuleCall_1_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropSelector__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropSelectorAccess().getNamePropParserRuleCall_0_0()); }
		ruleProp
		{ after(grammarAccess.getPropSelectorAccess().getNamePropParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropSelector__ParamAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropSelectorAccess().getParamPRIMARYParserRuleCall_2_0()); }
		rulePRIMARY
		{ after(grammarAccess.getPropSelectorAccess().getParamPRIMARYParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_END_OF_LINE : RULE_WHITE_SPACE '\n' RULE_WHITE_SPACE;

RULE_WHITE_SPACE : (' '|'\t'|'\r')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
