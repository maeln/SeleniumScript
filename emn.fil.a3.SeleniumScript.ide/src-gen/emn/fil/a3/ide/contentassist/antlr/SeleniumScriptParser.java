/*
 * generated by Xtext 2.10.0
 */
package emn.fil.a3.ide.contentassist.antlr;

import com.google.inject.Inject;
import emn.fil.a3.ide.contentassist.antlr.internal.InternalSeleniumScriptParser;
import emn.fil.a3.services.SeleniumScriptGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class SeleniumScriptParser extends AbstractContentAssistParser {

	@Inject
	private SeleniumScriptGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalSeleniumScriptParser createParser() {
		InternalSeleniumScriptParser result = new InternalSeleniumScriptParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getFunAccess().getAlternatives(), "rule__Fun__Alternatives");
					put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
					put(grammarAccess.getSelectorsAccess().getAlternatives_1(), "rule__Selectors__Alternatives_1");
					put(grammarAccess.getElemAccess().getAlternatives(), "rule__Elem__Alternatives");
					put(grammarAccess.getPropAccess().getAlternatives(), "rule__Prop__Alternatives");
					put(grammarAccess.getPRIMARYAccess().getAlternatives(), "rule__PRIMARY__Alternatives");
					put(grammarAccess.getScriptAccess().getGroup(), "rule__Script__Group__0");
					put(grammarAccess.getScriptAccess().getGroup_1(), "rule__Script__Group_1__0");
					put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
					put(grammarAccess.getFunctionAccess().getGroup_1(), "rule__Function__Group_1__0");
					put(grammarAccess.getSelectorsAccess().getGroup(), "rule__Selectors__Group__0");
					put(grammarAccess.getSelectorsAccess().getGroup_1_0(), "rule__Selectors__Group_1_0__0");
					put(grammarAccess.getSelectorsAccess().getGroup_1_0_3(), "rule__Selectors__Group_1_0_3__0");
					put(grammarAccess.getSelectorAccess().getGroup(), "rule__Selector__Group__0");
					put(grammarAccess.getSelectorAccess().getGroup_1(), "rule__Selector__Group_1__0");
					put(grammarAccess.getSelectorAccess().getGroup_1_1(), "rule__Selector__Group_1_1__0");
					put(grammarAccess.getSelectorAccess().getGroup_1_1_1(), "rule__Selector__Group_1_1_1__0");
					put(grammarAccess.getPropSelectorAccess().getGroup(), "rule__PropSelector__Group__0");
					put(grammarAccess.getScriptAccess().getFunctionsAssignment_0(), "rule__Script__FunctionsAssignment_0");
					put(grammarAccess.getScriptAccess().getFunctionsAssignment_1_1(), "rule__Script__FunctionsAssignment_1_1");
					put(grammarAccess.getFunctionAccess().getNameAssignment_0(), "rule__Function__NameAssignment_0");
					put(grammarAccess.getFunctionAccess().getParamsAssignment_1_1(), "rule__Function__ParamsAssignment_1_1");
					put(grammarAccess.getSelectorsAccess().getSelectorsAssignment_1_0_1(), "rule__Selectors__SelectorsAssignment_1_0_1");
					put(grammarAccess.getSelectorsAccess().getSlectorsAssignment_1_0_3_1(), "rule__Selectors__SlectorsAssignment_1_0_3_1");
					put(grammarAccess.getSelectorsAccess().getSelectorAssignment_1_1(), "rule__Selectors__SelectorAssignment_1_1");
					put(grammarAccess.getSelectorAccess().getNameAssignment_0(), "rule__Selector__NameAssignment_0");
					put(grammarAccess.getSelectorAccess().getSelectorsAssignment_1_1_0(), "rule__Selector__SelectorsAssignment_1_1_0");
					put(grammarAccess.getSelectorAccess().getPropSelectorsAssignment_1_1_1_1(), "rule__Selector__PropSelectorsAssignment_1_1_1_1");
					put(grammarAccess.getPropSelectorAccess().getNameAssignment_0(), "rule__PropSelector__NameAssignment_0");
					put(grammarAccess.getPropSelectorAccess().getParamAssignment_2(), "rule__PropSelector__ParamAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalSeleniumScriptParser typedParser = (InternalSeleniumScriptParser) parser;
			typedParser.entryRuleScript();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SeleniumScriptGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SeleniumScriptGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
