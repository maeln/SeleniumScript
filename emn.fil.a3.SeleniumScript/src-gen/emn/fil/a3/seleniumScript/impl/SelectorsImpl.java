/**
 * generated by Xtext 2.10.0
 */
package emn.fil.a3.seleniumScript.impl;

import emn.fil.a3.seleniumScript.Selector;
import emn.fil.a3.seleniumScript.Selectors;
import emn.fil.a3.seleniumScript.SeleniumScriptPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Selectors</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link emn.fil.a3.seleniumScript.impl.SelectorsImpl#getSelectors <em>Selectors</em>}</li>
 *   <li>{@link emn.fil.a3.seleniumScript.impl.SelectorsImpl#getSlectors <em>Slectors</em>}</li>
 *   <li>{@link emn.fil.a3.seleniumScript.impl.SelectorsImpl#getSelector <em>Selector</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SelectorsImpl extends ExpressionImpl implements Selectors
{
  /**
   * The cached value of the '{@link #getSelectors() <em>Selectors</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSelectors()
   * @generated
   * @ordered
   */
  protected EList<Selector> selectors;

  /**
   * The cached value of the '{@link #getSlectors() <em>Slectors</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSlectors()
   * @generated
   * @ordered
   */
  protected EList<Selector> slectors;

  /**
   * The cached value of the '{@link #getSelector() <em>Selector</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSelector()
   * @generated
   * @ordered
   */
  protected EList<Selector> selector;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SelectorsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SeleniumScriptPackage.Literals.SELECTORS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Selector> getSelectors()
  {
    if (selectors == null)
    {
      selectors = new EObjectContainmentEList<Selector>(Selector.class, this, SeleniumScriptPackage.SELECTORS__SELECTORS);
    }
    return selectors;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Selector> getSlectors()
  {
    if (slectors == null)
    {
      slectors = new EObjectContainmentEList<Selector>(Selector.class, this, SeleniumScriptPackage.SELECTORS__SLECTORS);
    }
    return slectors;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Selector> getSelector()
  {
    if (selector == null)
    {
      selector = new EObjectContainmentEList<Selector>(Selector.class, this, SeleniumScriptPackage.SELECTORS__SELECTOR);
    }
    return selector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SeleniumScriptPackage.SELECTORS__SELECTORS:
        return ((InternalEList<?>)getSelectors()).basicRemove(otherEnd, msgs);
      case SeleniumScriptPackage.SELECTORS__SLECTORS:
        return ((InternalEList<?>)getSlectors()).basicRemove(otherEnd, msgs);
      case SeleniumScriptPackage.SELECTORS__SELECTOR:
        return ((InternalEList<?>)getSelector()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SeleniumScriptPackage.SELECTORS__SELECTORS:
        return getSelectors();
      case SeleniumScriptPackage.SELECTORS__SLECTORS:
        return getSlectors();
      case SeleniumScriptPackage.SELECTORS__SELECTOR:
        return getSelector();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SeleniumScriptPackage.SELECTORS__SELECTORS:
        getSelectors().clear();
        getSelectors().addAll((Collection<? extends Selector>)newValue);
        return;
      case SeleniumScriptPackage.SELECTORS__SLECTORS:
        getSlectors().clear();
        getSlectors().addAll((Collection<? extends Selector>)newValue);
        return;
      case SeleniumScriptPackage.SELECTORS__SELECTOR:
        getSelector().clear();
        getSelector().addAll((Collection<? extends Selector>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SeleniumScriptPackage.SELECTORS__SELECTORS:
        getSelectors().clear();
        return;
      case SeleniumScriptPackage.SELECTORS__SLECTORS:
        getSlectors().clear();
        return;
      case SeleniumScriptPackage.SELECTORS__SELECTOR:
        getSelector().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SeleniumScriptPackage.SELECTORS__SELECTORS:
        return selectors != null && !selectors.isEmpty();
      case SeleniumScriptPackage.SELECTORS__SLECTORS:
        return slectors != null && !slectors.isEmpty();
      case SeleniumScriptPackage.SELECTORS__SELECTOR:
        return selector != null && !selector.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //SelectorsImpl
