/*
 * generated by Xtext 2.10.0
 */
package emn.fil.a3.serializer;

import com.google.inject.Inject;
import emn.fil.a3.seleniumScript.Function;
import emn.fil.a3.seleniumScript.PropSelector;
import emn.fil.a3.seleniumScript.Script;
import emn.fil.a3.seleniumScript.Selector;
import emn.fil.a3.seleniumScript.Selectors;
import emn.fil.a3.seleniumScript.SeleniumScriptPackage;
import emn.fil.a3.services.SeleniumScriptGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class SeleniumScriptSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SeleniumScriptGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SeleniumScriptPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SeleniumScriptPackage.FUNCTION:
				sequence_Function(context, (Function) semanticObject); 
				return; 
			case SeleniumScriptPackage.PROP_SELECTOR:
				sequence_PropSelector(context, (PropSelector) semanticObject); 
				return; 
			case SeleniumScriptPackage.SCRIPT:
				sequence_Script(context, (Script) semanticObject); 
				return; 
			case SeleniumScriptPackage.SELECTOR:
				sequence_Selector(context, (Selector) semanticObject); 
				return; 
			case SeleniumScriptPackage.SELECTORS:
				sequence_Selectors(context, (Selectors) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Function returns Function
	 *
	 * Constraint:
	 *     (name=Fun params+=Expression)
	 */
	protected void sequence_Function(ISerializationContext context, Function semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PropSelector returns PropSelector
	 *
	 * Constraint:
	 *     (name=Prop param=PRIMARY)
	 */
	protected void sequence_PropSelector(ISerializationContext context, PropSelector semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SeleniumScriptPackage.Literals.PROP_SELECTOR__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SeleniumScriptPackage.Literals.PROP_SELECTOR__NAME));
			if (transientValues.isValueTransient(semanticObject, SeleniumScriptPackage.Literals.PROP_SELECTOR__PARAM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SeleniumScriptPackage.Literals.PROP_SELECTOR__PARAM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPropSelectorAccess().getNamePropParserRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPropSelectorAccess().getParamPRIMARYParserRuleCall_2_0(), semanticObject.getParam());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Script returns Script
	 *
	 * Constraint:
	 *     (functions+=Function functions+=Function*)
	 */
	protected void sequence_Script(ISerializationContext context, Script semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Selector returns Selector
	 *
	 * Constraint:
	 *     (name=Elem (selectors+=PropSelector propSelectors+=PropSelector*)?)
	 */
	protected void sequence_Selector(ISerializationContext context, Selector semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Selectors
	 *     Selectors returns Selectors
	 *
	 * Constraint:
	 *     ((selectors+=Selector selectors+=Selector*) | selectors+=Selector)
	 */
	protected void sequence_Selectors(ISerializationContext context, Selectors semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
