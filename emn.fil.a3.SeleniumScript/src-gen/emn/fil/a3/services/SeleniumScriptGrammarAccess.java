/*
 * generated by Xtext 2.10.0
 */
package emn.fil.a3.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SeleniumScriptGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "emn.fil.a3.SeleniumScript.Script");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctionsFunctionParserRuleCall_0_0 = (RuleCall)cFunctionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cEND_OF_LINETerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cFunctionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFunctionsFunctionParserRuleCall_1_1_0 = (RuleCall)cFunctionsAssignment_1_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Script:
		//	functions+=Function (END_OF_LINE functions+=Function)* WS*;
		@Override public ParserRule getRule() { return rule; }
		
		//functions+=Function (END_OF_LINE functions+=Function)* WS*
		public Group getGroup() { return cGroup; }
		
		//functions+=Function
		public Assignment getFunctionsAssignment_0() { return cFunctionsAssignment_0; }
		
		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_0_0() { return cFunctionsFunctionParserRuleCall_0_0; }
		
		//(END_OF_LINE functions+=Function)*
		public Group getGroup_1() { return cGroup_1; }
		
		//END_OF_LINE
		public RuleCall getEND_OF_LINETerminalRuleCall_1_0() { return cEND_OF_LINETerminalRuleCall_1_0; }
		
		//functions+=Function
		public Assignment getFunctionsAssignment_1_1() { return cFunctionsAssignment_1_1; }
		
		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_1_1_0() { return cFunctionsFunctionParserRuleCall_1_1_0; }
		
		//WS*
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "emn.fil.a3.SeleniumScript.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameFunParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cSEPARATORParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParamsExpressionParserRuleCall_1_1_0 = (RuleCall)cParamsAssignment_1_1.eContents().get(0);
		
		//Function:
		//	name=Fun (SEPARATOR params+=Expression);
		@Override public ParserRule getRule() { return rule; }
		
		//name=Fun (SEPARATOR params+=Expression)
		public Group getGroup() { return cGroup; }
		
		//name=Fun
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//Fun
		public RuleCall getNameFunParserRuleCall_0_0() { return cNameFunParserRuleCall_0_0; }
		
		//(SEPARATOR params+=Expression)
		public Group getGroup_1() { return cGroup_1; }
		
		//SEPARATOR
		public RuleCall getSEPARATORParserRuleCall_1_0() { return cSEPARATORParserRuleCall_1_0; }
		
		//params+=Expression
		public Assignment getParamsAssignment_1_1() { return cParamsAssignment_1_1; }
		
		//Expression
		public RuleCall getParamsExpressionParserRuleCall_1_1_0() { return cParamsExpressionParserRuleCall_1_1_0; }
	}
	public class FunElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "emn.fil.a3.SeleniumScript.Fun");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cOpenKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGoKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cClickKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cFillKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//Fun:
		//	"open" | "go" | "click" | "fill";
		@Override public ParserRule getRule() { return rule; }
		
		//"open" | "go" | "click" | "fill"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"open"
		public Keyword getOpenKeyword_0() { return cOpenKeyword_0; }
		
		//"go"
		public Keyword getGoKeyword_1() { return cGoKeyword_1; }
		
		//"click"
		public Keyword getClickKeyword_2() { return cClickKeyword_2; }
		
		//"fill"
		public Keyword getFillKeyword_3() { return cFillKeyword_3; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "emn.fil.a3.SeleniumScript.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSelectorsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPRIMARYParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Expression:
		//	Selectors | PRIMARY;
		@Override public ParserRule getRule() { return rule; }
		
		//Selectors | PRIMARY
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Selectors
		public RuleCall getSelectorsParserRuleCall_0() { return cSelectorsParserRuleCall_0; }
		
		//PRIMARY
		public RuleCall getPRIMARYParserRuleCall_1() { return cPRIMARYParserRuleCall_1; }
	}
	public class SelectorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "emn.fil.a3.SeleniumScript.Selectors");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cSelectorsAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cSelectorsSelectorParserRuleCall_1_0_1_0 = (RuleCall)cSelectorsAssignment_1_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Group cGroup_1_0_3 = (Group)cGroup_1_0.eContents().get(3);
		private final RuleCall cSELECTOR_COMBINATORParserRuleCall_1_0_3_0 = (RuleCall)cGroup_1_0_3.eContents().get(0);
		private final Assignment cSelectorsAssignment_1_0_3_1 = (Assignment)cGroup_1_0_3.eContents().get(1);
		private final RuleCall cSelectorsSelectorParserRuleCall_1_0_3_1_0 = (RuleCall)cSelectorsAssignment_1_0_3_1.eContents().get(0);
		private final Assignment cSelectorsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cSelectorsSelectorParserRuleCall_1_1_0 = (RuleCall)cSelectorsAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Selectors:
		//	'(' ('(' selectors+=Selector ')' (SELECTOR_COMBINATOR selectors+=Selector)*
		//	| selectors+=Selector) ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' ('(' selectors+=Selector ')' (SELECTOR_COMBINATOR selectors+=Selector)* | selectors+=Selector) ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//('(' selectors+=Selector ')' (SELECTOR_COMBINATOR selectors+=Selector)* | selectors+=Selector)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'(' selectors+=Selector ')' (SELECTOR_COMBINATOR selectors+=Selector)*
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0_0() { return cLeftParenthesisKeyword_1_0_0; }
		
		//selectors+=Selector
		public Assignment getSelectorsAssignment_1_0_1() { return cSelectorsAssignment_1_0_1; }
		
		//Selector
		public RuleCall getSelectorsSelectorParserRuleCall_1_0_1_0() { return cSelectorsSelectorParserRuleCall_1_0_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_0_2() { return cRightParenthesisKeyword_1_0_2; }
		
		//(SELECTOR_COMBINATOR selectors+=Selector)*
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }
		
		//SELECTOR_COMBINATOR
		public RuleCall getSELECTOR_COMBINATORParserRuleCall_1_0_3_0() { return cSELECTOR_COMBINATORParserRuleCall_1_0_3_0; }
		
		//selectors+=Selector
		public Assignment getSelectorsAssignment_1_0_3_1() { return cSelectorsAssignment_1_0_3_1; }
		
		//Selector
		public RuleCall getSelectorsSelectorParserRuleCall_1_0_3_1_0() { return cSelectorsSelectorParserRuleCall_1_0_3_1_0; }
		
		//selectors+=Selector
		public Assignment getSelectorsAssignment_1_1() { return cSelectorsAssignment_1_1; }
		
		//Selector
		public RuleCall getSelectorsSelectorParserRuleCall_1_1_0() { return cSelectorsSelectorParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class SelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "emn.fil.a3.SeleniumScript.Selector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameElemParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cWHITE_SPACETerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cPropSelectorsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cPropSelectorsPropSelectorParserRuleCall_1_1_0_0 = (RuleCall)cPropSelectorsAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final RuleCall cPROP_SELECTOR_COMBINATORParserRuleCall_1_1_1_0 = (RuleCall)cGroup_1_1_1.eContents().get(0);
		private final Assignment cPropSelectorsAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cPropSelectorsPropSelectorParserRuleCall_1_1_1_1_0 = (RuleCall)cPropSelectorsAssignment_1_1_1_1.eContents().get(0);
		
		//Selector:
		//	name=Elem (WHITE_SPACE (propSelectors+=PropSelector (PROP_SELECTOR_COMBINATOR propSelectors+=PropSelector)*))?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=Elem (WHITE_SPACE (propSelectors+=PropSelector (PROP_SELECTOR_COMBINATOR propSelectors+=PropSelector)*))?
		public Group getGroup() { return cGroup; }
		
		//name=Elem
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//Elem
		public RuleCall getNameElemParserRuleCall_0_0() { return cNameElemParserRuleCall_0_0; }
		
		//(WHITE_SPACE (propSelectors+=PropSelector (PROP_SELECTOR_COMBINATOR propSelectors+=PropSelector)*))?
		public Group getGroup_1() { return cGroup_1; }
		
		//WHITE_SPACE
		public RuleCall getWHITE_SPACETerminalRuleCall_1_0() { return cWHITE_SPACETerminalRuleCall_1_0; }
		
		//(propSelectors+=PropSelector (PROP_SELECTOR_COMBINATOR propSelectors+=PropSelector)*)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//propSelectors+=PropSelector
		public Assignment getPropSelectorsAssignment_1_1_0() { return cPropSelectorsAssignment_1_1_0; }
		
		//PropSelector
		public RuleCall getPropSelectorsPropSelectorParserRuleCall_1_1_0_0() { return cPropSelectorsPropSelectorParserRuleCall_1_1_0_0; }
		
		//(PROP_SELECTOR_COMBINATOR propSelectors+=PropSelector)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//PROP_SELECTOR_COMBINATOR
		public RuleCall getPROP_SELECTOR_COMBINATORParserRuleCall_1_1_1_0() { return cPROP_SELECTOR_COMBINATORParserRuleCall_1_1_1_0; }
		
		//propSelectors+=PropSelector
		public Assignment getPropSelectorsAssignment_1_1_1_1() { return cPropSelectorsAssignment_1_1_1_1; }
		
		//PropSelector
		public RuleCall getPropSelectorsPropSelectorParserRuleCall_1_1_1_1_0() { return cPropSelectorsPropSelectorParserRuleCall_1_1_1_1_0; }
	}
	public class ElemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "emn.fil.a3.SeleniumScript.Elem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cFieldKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cButtonKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCheckboxKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLinkKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cSelectKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//Elem:
		//	'field' | 'button' | 'checkbox' | 'link' | 'select';
		@Override public ParserRule getRule() { return rule; }
		
		//'field' | 'button' | 'checkbox' | 'link' | 'select'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'field'
		public Keyword getFieldKeyword_0() { return cFieldKeyword_0; }
		
		//'button'
		public Keyword getButtonKeyword_1() { return cButtonKeyword_1; }
		
		//'checkbox'
		public Keyword getCheckboxKeyword_2() { return cCheckboxKeyword_2; }
		
		//'link'
		public Keyword getLinkKeyword_3() { return cLinkKeyword_3; }
		
		//'select'
		public Keyword getSelectKeyword_4() { return cSelectKeyword_4; }
	}
	public class PropSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "emn.fil.a3.SeleniumScript.PropSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamePropParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cWHITE_SPACETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cParamAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamPRIMARYParserRuleCall_2_0 = (RuleCall)cParamAssignment_2.eContents().get(0);
		
		//PropSelector:
		//	name=Prop WHITE_SPACE param=PRIMARY;
		@Override public ParserRule getRule() { return rule; }
		
		//name=Prop WHITE_SPACE param=PRIMARY
		public Group getGroup() { return cGroup; }
		
		//name=Prop
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//Prop
		public RuleCall getNamePropParserRuleCall_0_0() { return cNamePropParserRuleCall_0_0; }
		
		//WHITE_SPACE
		public RuleCall getWHITE_SPACETerminalRuleCall_1() { return cWHITE_SPACETerminalRuleCall_1; }
		
		//param=PRIMARY
		public Assignment getParamAssignment_2() { return cParamAssignment_2; }
		
		//PRIMARY
		public RuleCall getParamPRIMARYParserRuleCall_2_0() { return cParamPRIMARYParserRuleCall_2_0; }
	}
	public class PropElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "emn.fil.a3.SeleniumScript.Prop");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIdKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cValueKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//Prop:
		//	'id' | 'class' | 'name' | 'value';
		@Override public ParserRule getRule() { return rule; }
		
		//'id' | 'class' | 'name' | 'value'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'id'
		public Keyword getIdKeyword_0() { return cIdKeyword_0; }
		
		//'class'
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }
		
		//'name'
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
		
		//'value'
		public Keyword getValueKeyword_3() { return cValueKeyword_3; }
	}
	public class PRIMARYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "emn.fil.a3.SeleniumScript.PRIMARY");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//PRIMARY:
		//	STRING | ID | INT;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID | INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class SEPARATORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "emn.fil.a3.SeleniumScript.SEPARATOR");
		private final RuleCall cWHITE_SPACETerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//SEPARATOR:
		//	WHITE_SPACE;
		@Override public ParserRule getRule() { return rule; }
		
		//WHITE_SPACE
		public RuleCall getWHITE_SPACETerminalRuleCall() { return cWHITE_SPACETerminalRuleCall; }
	}
	public class SELECTOR_COMBINATORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "emn.fil.a3.SeleniumScript.SELECTOR_COMBINATOR");
		private final Keyword cFullStopKeyword = (Keyword)rule.eContents().get(1);
		
		//SELECTOR_COMBINATOR:
		//	'.';
		@Override public ParserRule getRule() { return rule; }
		
		//'.'
		public Keyword getFullStopKeyword() { return cFullStopKeyword; }
	}
	public class PROP_SELECTOR_COMBINATORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "emn.fil.a3.SeleniumScript.PROP_SELECTOR_COMBINATOR");
		private final RuleCall cWHITE_SPACETerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PROP_SELECTOR_COMBINATOR:
		//	WHITE_SPACE;
		@Override public ParserRule getRule() { return rule; }
		
		//WHITE_SPACE
		public RuleCall getWHITE_SPACETerminalRuleCall() { return cWHITE_SPACETerminalRuleCall; }
	}
	
	
	private final ScriptElements pScript;
	private final FunctionElements pFunction;
	private final FunElements pFun;
	private final ExpressionElements pExpression;
	private final SelectorsElements pSelectors;
	private final SelectorElements pSelector;
	private final ElemElements pElem;
	private final PropSelectorElements pPropSelector;
	private final PropElements pProp;
	private final PRIMARYElements pPRIMARY;
	private final SEPARATORElements pSEPARATOR;
	private final SELECTOR_COMBINATORElements pSELECTOR_COMBINATOR;
	private final PROP_SELECTOR_COMBINATORElements pPROP_SELECTOR_COMBINATOR;
	private final TerminalRule tEND_OF_LINE;
	private final TerminalRule tWHITE_SPACE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SeleniumScriptGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pScript = new ScriptElements();
		this.pFunction = new FunctionElements();
		this.pFun = new FunElements();
		this.pExpression = new ExpressionElements();
		this.pSelectors = new SelectorsElements();
		this.pSelector = new SelectorElements();
		this.pElem = new ElemElements();
		this.pPropSelector = new PropSelectorElements();
		this.pProp = new PropElements();
		this.pPRIMARY = new PRIMARYElements();
		this.pSEPARATOR = new SEPARATORElements();
		this.pSELECTOR_COMBINATOR = new SELECTOR_COMBINATORElements();
		this.pPROP_SELECTOR_COMBINATOR = new PROP_SELECTOR_COMBINATORElements();
		this.tEND_OF_LINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "emn.fil.a3.SeleniumScript.END_OF_LINE");
		this.tWHITE_SPACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "emn.fil.a3.SeleniumScript.WHITE_SPACE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("emn.fil.a3.SeleniumScript".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Script:
	//	functions+=Function (END_OF_LINE functions+=Function)* WS*;
	public ScriptElements getScriptAccess() {
		return pScript;
	}
	
	public ParserRule getScriptRule() {
		return getScriptAccess().getRule();
	}
	
	//Function:
	//	name=Fun (SEPARATOR params+=Expression);
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Fun:
	//	"open" | "go" | "click" | "fill";
	public FunElements getFunAccess() {
		return pFun;
	}
	
	public ParserRule getFunRule() {
		return getFunAccess().getRule();
	}
	
	//Expression:
	//	Selectors | PRIMARY;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Selectors:
	//	'(' ('(' selectors+=Selector ')' (SELECTOR_COMBINATOR selectors+=Selector)*
	//	| selectors+=Selector) ')';
	public SelectorsElements getSelectorsAccess() {
		return pSelectors;
	}
	
	public ParserRule getSelectorsRule() {
		return getSelectorsAccess().getRule();
	}
	
	//Selector:
	//	name=Elem (WHITE_SPACE (propSelectors+=PropSelector (PROP_SELECTOR_COMBINATOR propSelectors+=PropSelector)*))?;
	public SelectorElements getSelectorAccess() {
		return pSelector;
	}
	
	public ParserRule getSelectorRule() {
		return getSelectorAccess().getRule();
	}
	
	//Elem:
	//	'field' | 'button' | 'checkbox' | 'link' | 'select';
	public ElemElements getElemAccess() {
		return pElem;
	}
	
	public ParserRule getElemRule() {
		return getElemAccess().getRule();
	}
	
	//PropSelector:
	//	name=Prop WHITE_SPACE param=PRIMARY;
	public PropSelectorElements getPropSelectorAccess() {
		return pPropSelector;
	}
	
	public ParserRule getPropSelectorRule() {
		return getPropSelectorAccess().getRule();
	}
	
	//Prop:
	//	'id' | 'class' | 'name' | 'value';
	public PropElements getPropAccess() {
		return pProp;
	}
	
	public ParserRule getPropRule() {
		return getPropAccess().getRule();
	}
	
	//PRIMARY:
	//	STRING | ID | INT;
	public PRIMARYElements getPRIMARYAccess() {
		return pPRIMARY;
	}
	
	public ParserRule getPRIMARYRule() {
		return getPRIMARYAccess().getRule();
	}
	
	//SEPARATOR:
	//	WHITE_SPACE;
	public SEPARATORElements getSEPARATORAccess() {
		return pSEPARATOR;
	}
	
	public ParserRule getSEPARATORRule() {
		return getSEPARATORAccess().getRule();
	}
	
	//SELECTOR_COMBINATOR:
	//	'.';
	public SELECTOR_COMBINATORElements getSELECTOR_COMBINATORAccess() {
		return pSELECTOR_COMBINATOR;
	}
	
	public ParserRule getSELECTOR_COMBINATORRule() {
		return getSELECTOR_COMBINATORAccess().getRule();
	}
	
	//PROP_SELECTOR_COMBINATOR:
	//	WHITE_SPACE;
	public PROP_SELECTOR_COMBINATORElements getPROP_SELECTOR_COMBINATORAccess() {
		return pPROP_SELECTOR_COMBINATOR;
	}
	
	public ParserRule getPROP_SELECTOR_COMBINATORRule() {
		return getPROP_SELECTOR_COMBINATORAccess().getRule();
	}
	
	//terminal END_OF_LINE:
	//	WHITE_SPACE "\n" WHITE_SPACE;
	public TerminalRule getEND_OF_LINERule() {
		return tEND_OF_LINE;
	}
	
	//terminal WHITE_SPACE:
	//	' ' | '\t' | '\r'*;
	public TerminalRule getWHITE_SPACERule() {
		return tWHITE_SPACE;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
