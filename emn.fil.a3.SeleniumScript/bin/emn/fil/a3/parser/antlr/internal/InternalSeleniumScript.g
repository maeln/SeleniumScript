/*
 * generated by Xtext 2.10.0
 */
grammar InternalSeleniumScript;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package emn.fil.a3.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package emn.fil.a3.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import emn.fil.a3.services.SeleniumScriptGrammarAccess;

}

@parser::members {

 	private SeleniumScriptGrammarAccess grammarAccess;

    public InternalSeleniumScriptParser(TokenStream input, SeleniumScriptGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Script";
   	}

   	@Override
   	protected SeleniumScriptGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleScript
entryRuleScript returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScriptRule()); }
	iv_ruleScript=ruleScript
	{ $current=$iv_ruleScript.current; }
	EOF;

// Rule Script
ruleScript returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getScriptAccess().getFunctionsFunctionParserRuleCall_0_0());
				}
				lv_functions_0_0=ruleFunction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScriptRule());
					}
					add(
						$current,
						"functions",
						lv_functions_0_0,
						"emn.fil.a3.SeleniumScript.Function");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			this_END_OF_LINE_1=RULE_END_OF_LINE
			{
				newLeafNode(this_END_OF_LINE_1, grammarAccess.getScriptAccess().getEND_OF_LINETerminalRuleCall_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getScriptAccess().getFunctionsFunctionParserRuleCall_1_1_0());
					}
					lv_functions_2_0=ruleFunction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getScriptRule());
						}
						add(
							$current,
							"functions",
							lv_functions_2_0,
							"emn.fil.a3.SeleniumScript.Function");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			this_WS_3=RULE_WS
			{
				newLeafNode(this_WS_3, grammarAccess.getScriptAccess().getWSTerminalRuleCall_2());
			}
		)*
	)
;

// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	iv_ruleFunction=ruleFunction
	{ $current=$iv_ruleFunction.current; }
	EOF;

// Rule Function
ruleFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionAccess().getNameFunParserRuleCall_0_0());
				}
				lv_name_0_0=ruleFun
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"emn.fil.a3.SeleniumScript.Fun");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			{
				newCompositeNode(grammarAccess.getFunctionAccess().getSEPARATORParserRuleCall_1_0());
			}
			ruleSEPARATOR
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionAccess().getParamsExpressionParserRuleCall_1_1_0());
					}
					lv_params_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionRule());
						}
						add(
							$current,
							"params",
							lv_params_2_0,
							"emn.fil.a3.SeleniumScript.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleFun
entryRuleFun returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFunRule()); }
	iv_ruleFun=ruleFun
	{ $current=$iv_ruleFun.current.getText(); }
	EOF;

// Rule Fun
ruleFun returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='open'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFunAccess().getOpenKeyword_0());
		}
		    |
		kw='go'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFunAccess().getGoKeyword_1());
		}
		    |
		kw='click'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFunAccess().getClickKeyword_2());
		}
		    |
		kw='fill'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFunAccess().getFillKeyword_3());
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getSelectorsParserRuleCall_0());
		}
		this_Selectors_0=ruleSelectors
		{
			$current = $this_Selectors_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getPRIMARYParserRuleCall_1());
		}
		rulePRIMARY
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSelectors
entryRuleSelectors returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectorsRule()); }
	iv_ruleSelectors=ruleSelectors
	{ $current=$iv_ruleSelectors.current; }
	EOF;

// Rule Selectors
ruleSelectors returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getSelectorsAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				otherlv_1='('
				{
					newLeafNode(otherlv_1, grammarAccess.getSelectorsAccess().getLeftParenthesisKeyword_1_0_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSelectorsAccess().getSelectorsSelectorParserRuleCall_1_0_1_0());
						}
						lv_selectors_2_0=ruleSelector
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSelectorsRule());
							}
							add(
								$current,
								"selectors",
								lv_selectors_2_0,
								"emn.fil.a3.SeleniumScript.Selector");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_3=')'
				{
					newLeafNode(otherlv_3, grammarAccess.getSelectorsAccess().getRightParenthesisKeyword_1_0_2());
				}
				(
					{
						newCompositeNode(grammarAccess.getSelectorsAccess().getSELECTOR_COMBINATORParserRuleCall_1_0_3_0());
					}
					ruleSELECTOR_COMBINATOR
					{
						afterParserOrEnumRuleCall();
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getSelectorsAccess().getSelectorsSelectorParserRuleCall_1_0_3_1_0());
							}
							lv_selectors_5_0=ruleSelector
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getSelectorsRule());
								}
								add(
									$current,
									"selectors",
									lv_selectors_5_0,
									"emn.fil.a3.SeleniumScript.Selector");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getSelectorsAccess().getSelectorsSelectorParserRuleCall_1_1_0());
					}
					lv_selectors_6_0=ruleSelector
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSelectorsRule());
						}
						add(
							$current,
							"selectors",
							lv_selectors_6_0,
							"emn.fil.a3.SeleniumScript.Selector");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getSelectorsAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleSelector
entryRuleSelector returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectorRule()); }
	iv_ruleSelector=ruleSelector
	{ $current=$iv_ruleSelector.current; }
	EOF;

// Rule Selector
ruleSelector returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSelectorAccess().getNameElemParserRuleCall_0_0());
				}
				lv_name_0_0=ruleElem
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSelectorRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"emn.fil.a3.SeleniumScript.Elem");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			this_WHITE_SPACE_1=RULE_WHITE_SPACE
			{
				newLeafNode(this_WHITE_SPACE_1, grammarAccess.getSelectorAccess().getWHITE_SPACETerminalRuleCall_1_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getSelectorAccess().getSelectorsPropSelectorParserRuleCall_1_1_0_0());
						}
						lv_selectors_2_0=rulePropSelector
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSelectorRule());
							}
							add(
								$current,
								"selectors",
								lv_selectors_2_0,
								"emn.fil.a3.SeleniumScript.PropSelector");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					{
						newCompositeNode(grammarAccess.getSelectorAccess().getPROP_SELECTOR_COMBINATORParserRuleCall_1_1_1_0());
					}
					rulePROP_SELECTOR_COMBINATOR
					{
						afterParserOrEnumRuleCall();
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getSelectorAccess().getPropSelectorsPropSelectorParserRuleCall_1_1_1_1_0());
							}
							lv_propSelectors_4_0=rulePropSelector
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getSelectorRule());
								}
								add(
									$current,
									"propSelectors",
									lv_propSelectors_4_0,
									"emn.fil.a3.SeleniumScript.PropSelector");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)
		)?
	)
;

// Entry rule entryRuleElem
entryRuleElem returns [String current=null]:
	{ newCompositeNode(grammarAccess.getElemRule()); }
	iv_ruleElem=ruleElem
	{ $current=$iv_ruleElem.current.getText(); }
	EOF;

// Rule Elem
ruleElem returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='field'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getElemAccess().getFieldKeyword_0());
		}
		    |
		kw='button'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getElemAccess().getButtonKeyword_1());
		}
		    |
		kw='checkbox'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getElemAccess().getCheckboxKeyword_2());
		}
		    |
		kw='link'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getElemAccess().getLinkKeyword_3());
		}
		    |
		kw='select'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getElemAccess().getSelectKeyword_4());
		}
	)
;

// Entry rule entryRulePropSelector
entryRulePropSelector returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPropSelectorRule()); }
	iv_rulePropSelector=rulePropSelector
	{ $current=$iv_rulePropSelector.current; }
	EOF;

// Rule PropSelector
rulePropSelector returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPropSelectorAccess().getNamePropParserRuleCall_0_0());
				}
				lv_name_0_0=ruleProp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPropSelectorRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"emn.fil.a3.SeleniumScript.Prop");
					afterParserOrEnumRuleCall();
				}
			)
		)
		this_WHITE_SPACE_1=RULE_WHITE_SPACE
		{
			newLeafNode(this_WHITE_SPACE_1, grammarAccess.getPropSelectorAccess().getWHITE_SPACETerminalRuleCall_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPropSelectorAccess().getParamPRIMARYParserRuleCall_2_0());
				}
				lv_param_2_0=rulePRIMARY
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPropSelectorRule());
					}
					set(
						$current,
						"param",
						lv_param_2_0,
						"emn.fil.a3.SeleniumScript.PRIMARY");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleProp
entryRuleProp returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPropRule()); }
	iv_ruleProp=ruleProp
	{ $current=$iv_ruleProp.current.getText(); }
	EOF;

// Rule Prop
ruleProp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='id'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPropAccess().getIdKeyword_0());
		}
		    |
		kw='class'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPropAccess().getClassKeyword_1());
		}
		    |
		kw='name'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPropAccess().getNameKeyword_2());
		}
		    |
		kw='value'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPropAccess().getValueKeyword_3());
		}
	)
;

// Entry rule entryRulePRIMARY
entryRulePRIMARY returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPRIMARYRule()); }
	iv_rulePRIMARY=rulePRIMARY
	{ $current=$iv_rulePRIMARY.current.getText(); }
	EOF;

// Rule PRIMARY
rulePRIMARY returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getPRIMARYAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getPRIMARYAccess().getIDTerminalRuleCall_1());
		}
		    |
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getPRIMARYAccess().getINTTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleSEPARATOR
entryRuleSEPARATOR returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSEPARATORRule()); }
	iv_ruleSEPARATOR=ruleSEPARATOR
	{ $current=$iv_ruleSEPARATOR.current.getText(); }
	EOF;

// Rule SEPARATOR
ruleSEPARATOR returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_WHITE_SPACE_0=RULE_WHITE_SPACE
	{
		$current.merge(this_WHITE_SPACE_0);
	}
	{
		newLeafNode(this_WHITE_SPACE_0, grammarAccess.getSEPARATORAccess().getWHITE_SPACETerminalRuleCall());
	}
;

// Entry rule entryRuleSELECTOR_COMBINATOR
entryRuleSELECTOR_COMBINATOR returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSELECTOR_COMBINATORRule()); }
	iv_ruleSELECTOR_COMBINATOR=ruleSELECTOR_COMBINATOR
	{ $current=$iv_ruleSELECTOR_COMBINATOR.current.getText(); }
	EOF;

// Rule SELECTOR_COMBINATOR
ruleSELECTOR_COMBINATOR returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='.'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getSELECTOR_COMBINATORAccess().getFullStopKeyword());
	}
;

// Entry rule entryRulePROP_SELECTOR_COMBINATOR
entryRulePROP_SELECTOR_COMBINATOR returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPROP_SELECTOR_COMBINATORRule()); }
	iv_rulePROP_SELECTOR_COMBINATOR=rulePROP_SELECTOR_COMBINATOR
	{ $current=$iv_rulePROP_SELECTOR_COMBINATOR.current.getText(); }
	EOF;

// Rule PROP_SELECTOR_COMBINATOR
rulePROP_SELECTOR_COMBINATOR returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_WHITE_SPACE_0=RULE_WHITE_SPACE
	{
		$current.merge(this_WHITE_SPACE_0);
	}
	{
		newLeafNode(this_WHITE_SPACE_0, grammarAccess.getPROP_SELECTOR_COMBINATORAccess().getWHITE_SPACETerminalRuleCall());
	}
;

RULE_END_OF_LINE : RULE_WHITE_SPACE '\n' RULE_WHITE_SPACE;

RULE_WHITE_SPACE : (' '|'\t'|'\r')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
