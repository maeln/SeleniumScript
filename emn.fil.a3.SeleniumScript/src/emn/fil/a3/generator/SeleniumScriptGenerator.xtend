/*
 * generated by Xtext 2.10.0
 */
package emn.fil.a3.generator

import java.io.File
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import emn.fil.a3.seleniumScript.Script
import emn.fil.a3.seleniumScript.Function
import emn.fil.a3.seleniumScript.Selectors
import emn.fil.a3.seleniumScript.Selector
import org.eclipse.emf.common.util.EList
import emn.fil.a3.seleniumScript.Expression
import emn.fil.a3.seleniumScript.PropSelector
import emn.fil.a3.seleniumScript.StringValue
import emn.fil.a3.seleniumScript.Primary
import emn.fil.a3.seleniumScript.IntValue

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class SeleniumScriptGenerator extends AbstractGenerator {
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
       fsa.generateFile('SeleniumTest.java',
           // resource.allContents.toIterable.filter(Calendar).head.generateCalendar
           resource.contents.filter(Script).head.genSeleniumcript
       )
   }
	
	def CharSequence genSeleniumcript(Script script) '''
		class Script {
			public static void main(String args[]) throws InterruptedException {
				System.setProperty("webdriver.gecko.driver", "TO FILL");
				WebDriver driver;
				
				«FOR f : script.functions»
					«switch f.name {
						case "open": genOpen(f)
						case "go": genGo(f)
						case "click": genClick(f)
						case "fill": genFill(f)
					}»
				«ENDFOR»
			}
		}
	'''
	
	def CharSequence genOpen(Function f) {
		val param = f.params.get(0)
		if(!(param instanceof StringValue)) 
			throw new RuntimeException("A browser name is needed for `open` function in expression " + f)
		
		val browser = (param as StringValue).value
		
		if(browser != 'firefox')
			throw new RuntimeException("Browser not supported. Please use Firefox and the Gecko driver.")
		
		'''driver = new « browser.toFirstUpper »Driver();'''
	}
	
	def CharSequence genGo(Function f) {
		val param = f.params.get(0)
		if(!(param instanceof StringValue))
			throw new RuntimeException("A valid URL is needed for `go` function in expression " + f)
			
		'''driver.get("«(param as StringValue).value»");'''
	}
	
	def CharSequence genClick(Function f) {
		val param = f.params.get(0)
		if(!(param instanceof Selectors)) 
			throw new RuntimeException("A Selector is needed in parameter of `click` in expression " + f);
			
		'''driver.findElement(« xpath(param as Selectors) »)).click();'''
	}
	
	def xpath(Selectors selectors) {
		selectors.selectors.map[ xpath ].join(" | ")
	}
	
	def xpath(Selector selector) {
		val props = xpath(selector.propSelectors);
		switch selector.name {
			case "field" : '''input[ @type="text" and «props»]'''
			case "button" : '''
				button[«props»] |
				input[ (@type="button" or @type="submit" or @type="reset" «props»]
			'''
			case "checkbox" :'''input[ @type="checkbox" and «props»]'''
			case "link" :'''a[ «props»]'''
			case "select" :'''select[ «props»]'''
		}
	}
	
	def xpath(EList<PropSelector> props) {
		props.map[p | '''@«p.name» = «xpath(p.param)»'''].join(" and ")
	}
	
	def xpath(Primary prim) {
		if(prim instanceof StringValue) {
			return '"' + (prim as StringValue).value + '"';
		}
		else if(prim instanceof IntValue) {
			return (prim as IntValue).value;
		}
		else
			return prim.toString()
	}
	
	def CharSequence genFill(Function f) {
		val param = f.params.get(0)
		if(!(param instanceof Selectors)) 
			throw new RuntimeException("A Selector is needed in parameter of `click` in expression " + f);
			
		'''driver.findElement(« xpath(param as Selectors) »)).sendKeys(«xpath(f.params.get(1) as Primary)»);'''
	}
	
	def CharSequence genXPath(Selector s) '''
	
	'''
}
