/**
 * generated by Xtext 2.10.0
 */
package emn.fil.a3.generator;

import com.google.common.collect.Iterables;
import emn.fil.a3.seleniumScript.Expression;
import emn.fil.a3.seleniumScript.Function;
import emn.fil.a3.seleniumScript.PropSelector;
import emn.fil.a3.seleniumScript.Script;
import emn.fil.a3.seleniumScript.Selector;
import emn.fil.a3.seleniumScript.Selectors;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class SeleniumScriptGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EList<EObject> _contents = resource.getContents();
    Iterable<Script> _filter = Iterables.<Script>filter(_contents, Script.class);
    Script _head = IterableExtensions.<Script>head(_filter);
    CharSequence _genSeleniumcript = this.genSeleniumcript(_head);
    fsa.generateFile("SeleniumTest.java", _genSeleniumcript);
  }
  
  public CharSequence genSeleniumcript(final Script script) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class Script {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String args[]) throws InterruptedException {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.setProperty(\"webdriver.gecko.driver\", \"TO FILL\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("WebDriver driver;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    {
      EList<Function> _functions = script.getFunctions();
      for(final Function f : _functions) {
        _builder.append("\t\t");
        CharSequence _switchResult = null;
        String _name = f.getName();
        switch (_name) {
          case "open":
            _switchResult = this.genOpen(f);
            break;
          case "go":
            _switchResult = this.genGo(f);
            break;
          case "click":
            _switchResult = this.genClick(f);
            break;
          case "fill":
            _switchResult = this.genFill(f);
            break;
        }
        _builder.append(_switchResult, "\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genOpen(final Function f) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Expression> _params = f.getParams();
      Expression _get = _params.get(0);
      boolean _equals = _get.equals("firefox");
      if (_equals) {
        _builder.append("driver = new FirefoxDriver()");
        _builder.newLine();
      } else {
        _builder.append("throw new RuntimeException(\"Unsuported browser.\");");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence genGo(final Function f) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("driver.get(\"");
    EList<Expression> _params = f.getParams();
    Expression _get = _params.get(0);
    _builder.append(_get, "");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence genClick(final Function f) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Expression> _params = f.getParams();
      Expression _get = _params.get(0);
      if ((_get instanceof Selectors)) {
        _builder.append("driver.findElement(");
        EList<Expression> _params_1 = f.getParams();
        _builder.append(_params_1, "");
        _builder.append(").click();");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("throw new RuntimeException(\"Unknown expression.\");");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public void getXpathFromSelectors(final EList<Expression> expressions) {
    Expression firstParam = expressions.get(0);
    if ((firstParam instanceof Selectors)) {
      EList<Selector> selectors = ((Selectors) firstParam).getSelectors();
      final Function1<Selector, String> _function = (Selector s) -> {
        String _xblockexpression = null;
        {
          EList<PropSelector> _propSelectors = s.getPropSelectors();
          String props = this.getXPathFromProps(_propSelectors);
          String _switchResult = null;
          String _name = s.getName();
          switch (_name) {
            case "field":
              StringConcatenation _builder = new StringConcatenation();
              _builder.append("input[ @type=\"text\" and ");
              _builder.append(props, "");
              _builder.append("]");
              _builder.newLineIfNotEmpty();
              _switchResult = _builder.toString();
              break;
            case "button":
              StringConcatenation _builder_1 = new StringConcatenation();
              _builder_1.append("button[");
              _builder_1.append(props, "");
              _builder_1.append("] |");
              _builder_1.newLineIfNotEmpty();
              _builder_1.append("input[ (@type=\"button\" or @type=\"submit\" or @type=\"reset\" ");
              _builder_1.append(props, "");
              _builder_1.newLineIfNotEmpty();
              _switchResult = _builder_1.toString();
              break;
            case "checkbox":
              StringConcatenation _builder_2 = new StringConcatenation();
              _builder_2.append("input[ @type=\"checkbox\" and ");
              _builder_2.append(props, "");
              _builder_2.append("]");
              _builder_2.newLineIfNotEmpty();
              _switchResult = _builder_2.toString();
              break;
            case "link":
              StringConcatenation _builder_3 = new StringConcatenation();
              _builder_3.append("a[ ");
              _builder_3.append(props, "");
              _builder_3.append("]");
              _builder_3.newLineIfNotEmpty();
              _switchResult = _builder_3.toString();
              break;
            case "select":
              StringConcatenation _builder_4 = new StringConcatenation();
              _builder_4.append("select[ ");
              _builder_4.append(props, "");
              _builder_4.append("]");
              _builder_4.newLineIfNotEmpty();
              _switchResult = _builder_4.toString();
              break;
          }
          _xblockexpression = _switchResult;
        }
        return _xblockexpression;
      };
      List<String> paths = ListExtensions.<Selector, String>map(selectors, _function);
    } else {
      throw new IllegalArgumentException("Selector Needed");
    }
  }
  
  public String getXPathFromProps(final EList<PropSelector> props) {
    return "TODO";
  }
  
  public CharSequence genFill(final Function f) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder;
  }
  
  public CharSequence genXPath(final Selector s) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t");
    _builder.newLine();
    return _builder;
  }
}
